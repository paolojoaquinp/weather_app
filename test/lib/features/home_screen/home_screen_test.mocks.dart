// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_weather_app/test/lib/features/home_screen/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_weather_app/features/home_screen/domain/entities/forecast_entity.dart'
    as _i7;
import 'package:flutter_weather_app/features/home_screen/domain/entities/weather_entity.dart'
    as _i5;
import 'package:flutter_weather_app/features/home_screen/domain/repository/weather_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:oxidized/oxidized.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i2.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.WeatherEntity, String>> getCurrentWeather({
    required double? lat,
    required double? lng,
    bool? forceRefresh = false,
    Duration? customCacheDuration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentWeather, [], {
              #lat: lat,
              #lng: lng,
              #forceRefresh: forceRefresh,
              #customCacheDuration: customCacheDuration,
            }),
            returnValue:
                _i3.Future<_i4.Result<_i5.WeatherEntity, String>>.value(
                  _i6.dummyValue<_i4.Result<_i5.WeatherEntity, String>>(
                    this,
                    Invocation.method(#getCurrentWeather, [], {
                      #lat: lat,
                      #lng: lng,
                      #forceRefresh: forceRefresh,
                      #customCacheDuration: customCacheDuration,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i5.WeatherEntity, String>>);

  @override
  _i3.Future<_i4.Result<_i7.ForecastEntity, String>> getForecast({
    required double? lat,
    required double? lng,
    bool? forceRefresh = false,
    Duration? customCacheDuration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getForecast, [], {
              #lat: lat,
              #lng: lng,
              #forceRefresh: forceRefresh,
              #customCacheDuration: customCacheDuration,
            }),
            returnValue:
                _i3.Future<_i4.Result<_i7.ForecastEntity, String>>.value(
                  _i6.dummyValue<_i4.Result<_i7.ForecastEntity, String>>(
                    this,
                    Invocation.method(#getForecast, [], {
                      #lat: lat,
                      #lng: lng,
                      #forceRefresh: forceRefresh,
                      #customCacheDuration: customCacheDuration,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<_i7.ForecastEntity, String>>);
}
